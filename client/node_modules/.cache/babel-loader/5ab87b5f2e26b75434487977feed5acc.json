{"ast":null,"code":"/** @format */\nconst initialState = {\n  country: [],\n  population: []\n};\n\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_COUNTRY\":\n      return { ...state,\n        country: action.payload\n      };\n\n    case \"SORT_POPULATION\":\n      const sortPopulation = action.payload === \"max\" ? state.country.sort(function (a, b) {\n        if (a.population > b.population) {\n          return 1;\n        }\n\n        if (b.population > a.population) {\n          return -1;\n        }\n\n        return 0;\n      }) : state.country.sort(function (a, b) {\n        if (a.population > b.population) {\n          return -1;\n        }\n\n        if (b.population > a.population) {\n          return 1;\n        }\n\n        return 0;\n      });\n      return { ...state,\n        population: sortPopulation\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","map":{"version":3,"names":["initialState","country","population","rootReducer","state","action","type","payload","sortPopulation","sort","a","b"],"sources":["C:/CODE/HENRY/PI-Countries-main_jr/client/src/redux/reducer/index.js"],"sourcesContent":["/** @format */\r\nconst initialState = { country: [], population: [] };\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n   switch (action.type) {\r\n      case \"GET_COUNTRY\":\r\n         return {\r\n            ...state,\r\n            country: action.payload,\r\n         };\r\n      case \"SORT_POPULATION\":\r\n         const sortPopulation =\r\n            action.payload === \"max\"\r\n               ? state.country.sort(function (a, b) {\r\n                    if (a.population > b.population) {\r\n                       return 1;\r\n                    }\r\n                    if (b.population > a.population) {\r\n                       return -1;\r\n                    }\r\n                    return 0;\r\n                 })\r\n               : state.country.sort(function (a, b) {\r\n                    if (a.population > b.population) {\r\n                       return -1;\r\n                    }\r\n                    if (b.population > a.population) {\r\n                       return 1;\r\n                    }\r\n                    return 0;\r\n                 });\r\n         return {\r\n            ...state,\r\n            population: sortPopulation,\r\n         };\r\n      default:\r\n         return state;\r\n   }\r\n}\r\nexport default rootReducer;\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG;EAAEC,OAAO,EAAE,EAAX;EAAeC,UAAU,EAAE;AAA3B,CAArB;;AAEA,SAASC,WAAT,GAAmD;EAAA,IAA9BC,KAA8B,uEAAtBJ,YAAsB;EAAA,IAARK,MAAQ;;EAChD,QAAQA,MAAM,CAACC,IAAf;IACG,KAAK,aAAL;MACG,OAAO,EACJ,GAAGF,KADC;QAEJH,OAAO,EAAEI,MAAM,CAACE;MAFZ,CAAP;;IAIH,KAAK,iBAAL;MACG,MAAMC,cAAc,GACjBH,MAAM,CAACE,OAAP,KAAmB,KAAnB,GACKH,KAAK,CAACH,OAAN,CAAcQ,IAAd,CAAmB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;QAChC,IAAID,CAAC,CAACR,UAAF,GAAeS,CAAC,CAACT,UAArB,EAAiC;UAC9B,OAAO,CAAP;QACF;;QACD,IAAIS,CAAC,CAACT,UAAF,GAAeQ,CAAC,CAACR,UAArB,EAAiC;UAC9B,OAAO,CAAC,CAAR;QACF;;QACD,OAAO,CAAP;MACF,CARD,CADL,GAUKE,KAAK,CAACH,OAAN,CAAcQ,IAAd,CAAmB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;QAChC,IAAID,CAAC,CAACR,UAAF,GAAeS,CAAC,CAACT,UAArB,EAAiC;UAC9B,OAAO,CAAC,CAAR;QACF;;QACD,IAAIS,CAAC,CAACT,UAAF,GAAeQ,CAAC,CAACR,UAArB,EAAiC;UAC9B,OAAO,CAAP;QACF;;QACD,OAAO,CAAP;MACF,CARD,CAXR;MAoBA,OAAO,EACJ,GAAGE,KADC;QAEJF,UAAU,EAAEM;MAFR,CAAP;;IAIH;MACG,OAAOJ,KAAP;EAhCN;AAkCF;;AACD,eAAeD,WAAf"},"metadata":{},"sourceType":"module"}