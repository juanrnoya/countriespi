{"ast":null,"code":"import { strictEqual } from \"assert\";\n/** @format */\n\nconst initialState = {\n  country: [],\n  population: [],\n  allCountries: [],\n  alphabetically: [],\n  activity: []\n};\n\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_COUNTRY\":\n      return { ...state,\n        country: action.payload,\n        allCountries: action.payload\n      };\n    // case \"FILTER_ACTIVITY\":\n    //    const activity = state.allActivities;\n    //    const countriesFilterByActivity =\n    //       action.payload === \"With Activities\"\n    //          ? allActivities :\n    //          : allActivities.filter((e) => e.activity.length > 0);\n    // return {\n    //       ...state,\n    //       activity: countriesFilterByActivity,\n    //    };\n\n    case \"FILTER_CONTINENT\":\n      const allCountries = state.allCountries;\n      const CountriesFilterByContinent = action.payload === \"all\" ? allCountries : allCountries.filter(e => e.continents === action.payload);\n      return { ...state,\n        country: CountriesFilterByContinent\n      };\n\n    case \"GET_COUNTRY_BY_NAME\":\n      return { ...state,\n        country: action.payload\n      };\n\n    case \"SORT_POPULATION\":\n      const sortPopulation = action.payload === \"min\" ? state.country.sort(function (a, b) {\n        if (a.population > b.population) {\n          return 1;\n        }\n\n        if (b.population > a.population) {\n          return -1;\n        }\n\n        return 0;\n      }) : state.country.sort(function (a, b) {\n        if (a.population > b.population) {\n          return -1;\n        }\n\n        if (b.population > a.population) {\n          return 1;\n        }\n\n        return 0;\n      });\n      return { ...state,\n        population: sortPopulation\n      };\n\n    case \"SORT_ALP\":\n      const sortAlphabetically = action.payload === \"From A-Z\" ? state.country.sort(function (a, b) {\n        if (a.name > b.name) {\n          return 1;\n        }\n\n        if (b.name > a.name) {\n          return -1;\n        }\n\n        return 0;\n      }) : state.country.sort(function (a, b) {\n        if (a.name > b.name) {\n          return -1;\n        }\n\n        if (b.name > a.name) {\n          return 1;\n        }\n\n        return 0;\n      });\n      return { ...state,\n        alphabetically: sortAlphabetically\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","map":{"version":3,"names":["strictEqual","initialState","country","population","allCountries","alphabetically","activity","rootReducer","state","action","type","payload","CountriesFilterByContinent","filter","e","continents","sortPopulation","sort","a","b","sortAlphabetically","name"],"sources":["C:/Users/juanr/Code/PI-Countries-main_jr/client/src/redux/reducer/index.js"],"sourcesContent":["import { strictEqual } from \"assert\";\r\n\r\n/** @format */\r\nconst initialState = {\r\n   country: [],\r\n   population: [],\r\n   allCountries: [],\r\n   alphabetically: [],\r\n   activity: [],\r\n};\r\nfunction rootReducer(state = initialState, action) {\r\n   switch (action.type) {\r\n      case \"GET_COUNTRY\":\r\n         return {\r\n            ...state,\r\n            country: action.payload,\r\n            allCountries: action.payload,\r\n         };\r\n\r\n      // case \"FILTER_ACTIVITY\":\r\n      //    const activity = state.allActivities;\r\n      //    const countriesFilterByActivity =\r\n      //       action.payload === \"With Activities\"\r\n      //          ? allActivities :\r\n      //          : allActivities.filter((e) => e.activity.length > 0);\r\n      // return {\r\n      //       ...state,\r\n      //       activity: countriesFilterByActivity,\r\n      //    };\r\n      case \"FILTER_CONTINENT\":\r\n         const allCountries = state.allCountries;\r\n         const CountriesFilterByContinent =\r\n            action.payload === \"all\"\r\n               ? allCountries\r\n               : allCountries.filter((e) => e.continents === action.payload);\r\n\r\n         return {\r\n            ...state,\r\n            country: CountriesFilterByContinent,\r\n         };\r\n      case \"GET_COUNTRY_BY_NAME\":\r\n         return {\r\n            ...state,\r\n            country: action.payload,\r\n         };\r\n      case \"SORT_POPULATION\":\r\n         const sortPopulation =\r\n            action.payload === \"min\"\r\n               ? state.country.sort(function (a, b) {\r\n                    if (a.population > b.population) {\r\n                       return 1;\r\n                    }\r\n                    if (b.population > a.population) {\r\n                       return -1;\r\n                    }\r\n                    return 0;\r\n                 })\r\n               : state.country.sort(function (a, b) {\r\n                    if (a.population > b.population) {\r\n                       return -1;\r\n                    }\r\n                    if (b.population > a.population) {\r\n                       return 1;\r\n                    }\r\n                    return 0;\r\n                 });\r\n         return {\r\n            ...state,\r\n            population: sortPopulation,\r\n         };\r\n      case \"SORT_ALP\":\r\n         const sortAlphabetically =\r\n            action.payload === \"From A-Z\"\r\n               ? state.country.sort(function (a, b) {\r\n                    if (a.name > b.name) {\r\n                       return 1;\r\n                    }\r\n                    if (b.name > a.name) {\r\n                       return -1;\r\n                    }\r\n                    return 0;\r\n                 })\r\n               : state.country.sort(function (a, b) {\r\n                    if (a.name > b.name) {\r\n                       return -1;\r\n                    }\r\n                    if (b.name > a.name) {\r\n                       return 1;\r\n                    }\r\n                    return 0;\r\n                 });\r\n\r\n         return {\r\n            ...state,\r\n            alphabetically: sortAlphabetically,\r\n         };\r\n      default:\r\n         return state;\r\n   }\r\n}\r\nexport default rootReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}